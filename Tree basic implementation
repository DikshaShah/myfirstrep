#include <bits/stdc++.h>
using namespace std;
struct Node
{
    int data;
    Node* left;
    Node* right;
    Node(int x)
    {
        this->data  = x;
        this->left = NULL;
        this->right = NULL;
    }
};
void LevelOrder(Node* root)
{
    if(root == NULL)
        return;
    queue <Node*> q;
       q.push(root);
       while(q.empty() == false)
       {
          Node* temp = q.front();
          q.pop();
          cout<<temp->data<<" ";
          if(temp->left)
            q.push(temp->left);

          if(temp->right)
            q.push(temp->right);
       }
}
void DiagonalOrder(Node* root)
{
    if(root == NULL)
        return;
    queue <Node*> q;
    q.push(root);
    while(q.empty() == false)
    {
        Node* temp = q.front();
        q.pop();
        cout<<temp->data<<" ";
        while(temp->right != NULL)
        {
          cout<<temp->right->data<<" ";
          if(temp->left)
             q.push(temp->left);
           temp = temp->right;
        }
    }
}
void VerticalOrder(Node* root,int hd)
{
    if(root == NULL)
        return;
    map<int, vector<int> > m;
    queue< pair<Node*,int> > q;
    q.push(make_pair(root,hd));
    while(q.empty() == false)
    {
        pair<Node*,int> temp = q.front();
        q.pop();

        m[temp.second].push_back(temp.first->data);

        if(temp.first->left)
            q.push(make_pair(temp.first->left, temp.second-1));

        if(temp.first->right)
            q.push(make_pair(temp.first->right, temp.second+1));
    }
    map<int, vector<int> >::iterator itr;
    for(itr = m.begin(); itr != m.end(); itr++)
    {
        for(int  i = 0; i < itr->second.size(); i++)
            cout<<itr->second[i]<<" ";
    }
}
Node* Insert(Node* root, int x)
{
    if(root == NULL)
        root = new Node(x);
    else
    {
       queue <Node*> q;
       q.push(root);
       while(q.empty() == false)
       {
          Node* temp = q.front();
          q.pop();
          if(temp->left == 0){
                temp->left = new Node(x);
                break;
          }
          else
            q.push(temp->left);

          if(temp->right == 0){
            temp->right = new Node(x);
            break;
          }
          else
            q.push(temp->right);
       }
    }
    return root;
}
void Delete(Node* root, int key)
{
    Node* add = Search(root, key);
}
void Inorder(Node* root)
{
    if(root == NULL)
        return ;
    Inorder(root->left);
    cout<<root->data<<" ";
    Inorder(root->right);
}
int main()
{
    int n ;
    cin>> n;
    Node* root = NULL;
    for(int i = 0; i < n; i++)
    {
       int x;
       cin >> x;
       root = Insert(root, x);
    }
    cout<<"In Order traversal is\n";
    Inorder(root);
    cout<<"\nLevel Order traversal is\n";
    LevelOrder(root);
    cout<<"\nVertical Order traversal is\n";
    VerticalOrder(root, 0);
    cout<<"\nDiagonal Order traversal is\n";
    DiagonalOrder(root);
    cout<<"\nEnter the number of nodes want to delete:\n";
    int d;
    cin >> d;
    for(int i = 0; i < d; i++)
    {
        cin>>key;
        Delete(root, key);
    }
   return 0;
}
